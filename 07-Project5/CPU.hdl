// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=notinstruction);
    Mux16(a=outM1, b=instruction, sel=notinstruction, out=i);

    Or(a=notinstruction, b=instruction[5], out=inA);
    ARegister(in=i, load=inA, out=A, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=A, b=inM, sel=AorM, out=AM);
    
    // Unpack the instruction and send the various bits into the ALU.
    // IN  D, AM, instruction[*]
    // OUT outM, zr, ng
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM1, out=outM, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[4], out=d1);
    DRegister(in=outM1, load=d1, out=D);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=nzr, out=posnzr);
    And(a=jgt, b=posnzr, out=x1);

    // Jump logic: compute whether to load the PC with the A-register value,
    // based on the instruction's jump bits and the ALU output flags.
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zr, out=x2);

    // x1: jump if greater than zero (JGT)
    // x2: jump if equal to zero (JEQ)
    // x3: jump if less than zero (JLT)
    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ng, out=x3);

    // Jump logic: x1 = JGT, x2 = JEQ, x3 = JLT
    Or(a=x1, b=x2, out=xt);
    Or(a=x3, b=xt, out=x);

    PC(in=A, load=x, inc=true, reset=reset, out[0..14]=pc);
}